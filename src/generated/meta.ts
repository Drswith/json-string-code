// This file is generated by `vscode-ext-gen`. Do not modify manually.
// @see https://github.com/antfu/vscode-ext-gen

// Meta info
export const publisher = "drswith"
export const name = "vscode-json-string-code-editor"
export const version = "0.3.5"
export const displayName = "JSON String Code Editor"
export const description = "Enhanced JSON schema code snippet editing experience with temporary code editor tabs"
export const extensionId = `${publisher}.${name}`

/**
 * Type union of all commands
 */
export type CommandKey = 
  | "vscode-json-string-code-editor.editCode"
  | "vscode-json-string-code-editor.editCodeAtRange"
  | "vscode-json-string-code-editor.cleanupTempFiles"

/**
 * Commands map registed by `drswith.vscode-json-string-code-editor`
 */
export const commands = {
  /**
   * Edit Code in Temporary Editor
   * @value `vscode-json-string-code-editor.editCode`
   */
  editCode: "vscode-json-string-code-editor.editCode",
  /**
   * Edit Code at Range
   * @value `vscode-json-string-code-editor.editCodeAtRange`
   */
  editCodeAtRange: "vscode-json-string-code-editor.editCodeAtRange",
  /**
   * Clean Up Temporary Files
   * @value `vscode-json-string-code-editor.cleanupTempFiles`
   */
  cleanupTempFiles: "vscode-json-string-code-editor.cleanupTempFiles",
} satisfies Record<string, CommandKey>

/**
 * Type union of all configs
 */
export type ConfigKey = 
  | "vscode-json-string-code-editor.include"
  | "vscode-json-string-code-editor.exclude"
  | "vscode-json-string-code-editor.enableAutoDetection"
  | "vscode-json-string-code-editor.autoDetectFields"
  | "vscode-json-string-code-editor.logLevel"

export interface ConfigKeyTypeMap {
  "vscode-json-string-code-editor.include": string[],
  "vscode-json-string-code-editor.exclude": string[],
  "vscode-json-string-code-editor.enableAutoDetection": boolean,
  "vscode-json-string-code-editor.autoDetectFields": unknown[],
  "vscode-json-string-code-editor.logLevel": ("error" | "warn" | "info" | "debug"),
}

export interface ConfigShorthandMap {
  include: "vscode-json-string-code-editor.include",
  exclude: "vscode-json-string-code-editor.exclude",
  enableAutoDetection: "vscode-json-string-code-editor.enableAutoDetection",
  autoDetectFields: "vscode-json-string-code-editor.autoDetectFields",
  logLevel: "vscode-json-string-code-editor.logLevel",
}

export interface ConfigShorthandTypeMap {
  include: string[],
  exclude: string[],
  enableAutoDetection: boolean,
  autoDetectFields: unknown[],
  logLevel: ("error" | "warn" | "info" | "debug"),
}

export interface ConfigItem<T extends keyof ConfigKeyTypeMap> {
  key: T,
  default: ConfigKeyTypeMap[T],
}


/**
 * Configs map registered by `drswith.vscode-json-string-code-editor`
 */
export const configs = {
  /**
   * Glob patterns for files where the extension should be active
   * @key `vscode-json-string-code-editor.include`
   * @default `["**\/*.json","**\/*.jsonc"]`
   * @type `array`
   */
  include: {
    key: "vscode-json-string-code-editor.include",
    default: ["**/*.json","**/*.jsonc"],
  } as ConfigItem<"vscode-json-string-code-editor.include">,
  /**
   * Glob patterns for files that should be excluded from processing
   * @key `vscode-json-string-code-editor.exclude`
   * @default `["**\/node_modules/**","**\/dist/**","**\/build/**"]`
   * @type `array`
   */
  exclude: {
    key: "vscode-json-string-code-editor.exclude",
    default: ["**/node_modules/**","**/dist/**","**/build/**"],
  } as ConfigItem<"vscode-json-string-code-editor.exclude">,
  /**
   * Automatically detect code in JSON strings
   * @key `vscode-json-string-code-editor.enableAutoDetection`
   * @default `true`
   * @type `boolean`
   */
  enableAutoDetection: {
    key: "vscode-json-string-code-editor.enableAutoDetection",
    default: true,
  } as ConfigItem<"vscode-json-string-code-editor.enableAutoDetection">,
  /**
   * Field names that should be automatically detected as containing code
   * @key `vscode-json-string-code-editor.autoDetectFields`
   * @default `["adaptor","script","code","expression"]`
   * @type `array`
   */
  autoDetectFields: {
    key: "vscode-json-string-code-editor.autoDetectFields",
    default: ["adaptor","script","code","expression"],
  } as ConfigItem<"vscode-json-string-code-editor.autoDetectFields">,
  /**
   * Set the logging level for the extension
   * @key `vscode-json-string-code-editor.logLevel`
   * @default `"info"`
   * @type `string`
   */
  logLevel: {
    key: "vscode-json-string-code-editor.logLevel",
    default: "info",
  } as ConfigItem<"vscode-json-string-code-editor.logLevel">,
}

export interface ScopedConfigKeyTypeMap {
  "include": string[],
  "exclude": string[],
  "enableAutoDetection": boolean,
  "autoDetectFields": unknown[],
  "logLevel": ("error" | "warn" | "info" | "debug"),
}

export const scopedConfigs = {
  scope: "vscode-json-string-code-editor",
  defaults: {
    "include": ["**/*.json","**/*.jsonc"],
    "exclude": ["**/node_modules/**","**/dist/**","**/build/**"],
    "enableAutoDetection": true,
    "autoDetectFields": ["adaptor","script","code","expression"],
    "logLevel": "info",
  } satisfies ScopedConfigKeyTypeMap,
}

export interface NestedConfigs {
  "vscode-json-string-code-editor": {
    "include": string[],
    "exclude": string[],
    "enableAutoDetection": boolean,
    "autoDetectFields": unknown[],
    "logLevel": ("error" | "warn" | "info" | "debug"),
  },
}

export interface NestedScopedConfigs {
  "include": string[],
  "exclude": string[],
  "enableAutoDetection": boolean,
  "autoDetectFields": unknown[],
  "logLevel": ("error" | "warn" | "info" | "debug"),
}

